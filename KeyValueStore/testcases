Performance tests: measure the performance, as latency and throughput, for some workloads, 
including those with different popularity distributions


// No locking in files (need to check when this breaks)
// Caching
// Round Robin
// write a daemon process that tries to create connection with every server at regular intervals. 
// if connection is refused then restart server
// calculate time before printing 

Testcase 1:

(num of clients -- variable (3,4,5,1,2,10,12)) clients (start time)

1000000 requests // (this gets divided equally amongst clients --- 10000 per client const)

(end time)


Workloads: 100% write Put
50% Put, 50% get
100% Get (use the file used above)
95% Get, 5% write (95% update same key, 5% garbage)
100% Get (95% hot keys, 50% hot keys)


clien1 put x server0
kill server process (read from file -- line 1)
get x from server 1 and server 2
get from server 0 (if server 0 was up now) -- it will still return value from server 1


Correctness tests: ensure the code does what it is supposed to (including failure/recovery), 
consistency guarantees

Testcase 2:

client1: connect to server 0
make put requests
shutdown connection

after init with another server
start time
for loop (make get request from server 1) unless the key is same as the put value
when it matches becomes the end time
and then measure the time diff

Failure test cases:

Testcase 3:

server 0 is down at start
server1 puts x
shutdown
read x from server 0 (loop until you get the value)


TC:

clien1 put x server0
kill server process (read from file -- line 1)
get x from server 1 and server 2
get from server 0 (if server 0 was up now) -- it will still return value from server 1

TC:
kill a server and check how long it takes for the server to come up


All the below ones are same: I just need to make sure we always remain in sync
This is more manual or can be done from python automation

TC:
empty txt file 2
add contents to other (use a dummy text and write to file)
bring all servers up
check that their keys are synced (all of them)
connect to server 2 and get keys in for loop unless their values are as expected


TC:

// Next tc
// Also all keys are not synced up (if the 3 servers are not having the same key)


TC:
// all keys in the server should be synced
